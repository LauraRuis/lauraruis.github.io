---
layout: post
title:  "Structured Prediction part three - Training a linear-chain CRF"
date:   2021-01-25 13:09:17 -0500
usemathjax: true
---
<script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>

![annotated_example](/images/opener_gif/opener.gif)

In this final part of the series on structured prediction with linear-chain CRFs we will use our implementation from [part two]({% post_url 2021-01-25-crfpt2 %})
to train a model on real data.
To learn such a model, we need a dataset with examples consisting of input sentences annotated with POS tags.
We will choose the <a href="http://universaldependencies.org/" target="_blank">Universal Dependencies</a> dataset (<a href="https://www.aclweb.org/anthology/L14-1067/" target="_blank">Silveira et al., 2014</a>).

Then all the things we need to implement are:

- A `Vocabulary` to convert from strings to numerical values for computational models.

- A `TaggingDataset` to convert all our data to `Tensors` that can be processed by <a href="https://pytorch.org/" target="_blank">PyTorch</a>.

- A `train()` loop to train our CRF and feature-extractor end-to-end on data.

- A `test()` loop to test a trained model on new data.

# <span style="color:#C0392B">Imports</span>
Let's install and import the libraries we need (`TorchNLP` isn't part of the default runtime in Google Colab,
which I used for the implementation):

`!pip install torchnlp pytorch-nlp`

{% highlight python %}
import torch.nn as nn
import torch
import torchnlp
from torchnlp.datasets import ud_pos_dataset

from typing import List, Tuple, Iterator
from torch import Tensor
from collections import defaultdict, Counter
import numpy as np

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
{% endhighlight %}

To make sure that CUDA is in fact available (which is definitely nice and maybe even necessary for training
on the universal dependencies dataset), Google Colab offers sessions with a GPU! Select this in the runtime in the top-right
corner if you're coding everything yourself.

## <span style="color:#C0392B">The Vocabulary & Dataset</span>

First, we'll implement the vocabulary, which is a class that reads sentences as lists of strings, and
converts them to indices. Something pragmatical for sequence prediction with neural methods is that we often use an `<UNK>`-token.
In our training set, if a word occurs very infrequently, we probably cannot learn meaningful embeddings for it
and we can replace the occurrences of that word by `<UNK>`. This means that we will learn a kind of average embedding
for all infrequent words, and we can use this token again at test-time. At test-time there will inevitably be words
that don't occur in the training set, and since we don't have trained embeddings for those, they will map onto the `<UNK>`-token.

Both the code for the `Vocabulary` and the `TaggingDataset` below is very straightforward, so if you're familiar with
these kind of methods just skip them and go to the part below where we look at the Universal Dependencies dataset.

{% highlight python %}
class Vocabulary(object):
    """
    Object that maps words to indices to be processed by numerical models.
    """

    def __init__(self, 
                 pad_token="<PAD>",
                 unk_token="<UNK>"):
      """
      <PAD> and <UNK> tokens are by construction idxs 0 and 1.
      """
      self.pad_token = pad_token
      self.unk_token = unk_token
      self._idx_to_word = [pad_token, unk_token]
      self._word_to_idx = defaultdict(
                lambda: self._idx_to_word.index(self.pad_token))
      self._word_to_idx[unk_token] = 1
      self._word_frequencies = Counter()

    def word_to_idx(self, word: str) -> int:
      if word not in self._word_to_idx:
        return self._word_to_idx[self.unk_token]
      else:
        return self._word_to_idx[word]

    def idx_to_word(self, idx: int) -> str:
      return self._idx_to_word[idx]
    
    @property
    def unk_idx(self):
      return self.word_to_idx(self.unk_token)

    @property
    def size(self) -> int:
      return len(self._idx_to_word)
    
    @property
    def pad_idx(self):
      return self.word_to_idx(self.pad_token)

    def add_sentence(self, sentence: List[str]):
      # In this part of the code we read the sentences
      # and if a word in the sentence is already in
      # the vocab we just increase the counter,
      # if it's not we initialize a new index for it.
      for word in sentence:
        if word not in self._word_to_idx:
          self._word_to_idx[word] = self.size
          self._idx_to_word.append(word)
        self._word_frequencies[word] += 1
    
    def most_common(self, n=10):
      return self._word_frequencies.most_common(n=n)
{% endhighlight %}

We will use the above `Vocabulary`-class twice in the following, once for the input data consisting of words,
and once for the target data consisting of POS tags. Then the next class to implement is the class that holds the `TaggingDataset`:

{% highlight python %}
class TaggingDataset(object):
  """
  A class to hold data pairs of input words and target tags.
  """

  def __init__(self, data: List[Tuple[List, List]]):
    self._examples = []
    self._example_lengths = []
    self._test_examples = []
    self._test_example_lengths = []
    self._input_vocabulary = Vocabulary()
    self._target_vocabulary = Vocabulary()
    self.read_dataset(data)

  def read_dataset(self, input_data: List[Tuple[List, List]]):
    """Convert each example to a tensor and save it's length."""
    for input_list, target_list in input_data:
      assert len(input_list) == len(target_list), "Invalid data example."
      self._input_vocabulary.add_sentence(input_list)
      self._target_vocabulary.add_sentence(target_list)
      input_array = self.sentence_to_array(input_list, vocabulary="input")
      target_array = self.sentence_to_array(target_list, vocabulary="target")
      input_tensor = torch.tensor(input_array, dtype=torch.long, device=device)
      target_tensor = torch.tensor(target_array, dtype=torch.long, device=device)
      self._example_lengths.append(len(input_tensor))
      self._examples.append({"input_tensor": input_tensor.unsqueeze(0),
                             "target_tensor": target_tensor.unsqueeze(0)})

  def read_testset(self, input_data: List[Tuple[List, List]]):
    """Convert each example to a tensor and save it's lenght, convert unknown
    tokens to <UNK>."""
    for input_list, target_list in input_data:
      assert len(input_list) == len(target_list), "Invalid data example."
      input_array = self.sentence_to_array(input_list, vocabulary="input")
      target_array = self.sentence_to_array(target_list, vocabulary="target")
      input_tensor = torch.tensor(input_array, dtype=torch.long, device=device)
      target_tensor = torch.tensor(target_array, dtype=torch.long, device=device)
      self._test_example_lengths.append(len(input_tensor))
      self._test_examples.append({"input_tensor": input_tensor.unsqueeze(0),
                                  "target_tensor": target_tensor.unsqueeze(0)})

  def get_vocabulary(self, vocabulary: str) -> Vocabulary:
    if vocabulary == "input":
      vocab = self._input_vocabulary
    elif vocabulary == "target":
      vocab = self._target_vocabulary
    else:
      raise ValueError(
          "Specified unknown vocabulary in sentence_to_array: {}".format(
              vocabulary))
    return vocab
  
  def print_stats(self):
    print("Number of training examples in dataset: %d\n" % len(self._examples))
    print("Number of testing examples in dataset: %d\n" % len(
        self._test_examples))
    print("Input vocabulary size: %d" % self._input_vocabulary.size)
    print("Most common input tokens: ", self._input_vocabulary.most_common(5))
    print("\nTarget vocabulary size: %d" % self._target_vocabulary.size)
    print("Most common target tokens: ", self._target_vocabulary.most_common(5))
    if len(self._examples) > 0:
      print("\nTraining Example: ")
      self.print_example(0)
    if len(self._test_examples) > 0:
      print("\nTesting Example: ")
      self.print_example(0, train=False)

  def get_training_example(self, idx: int):
    if idx >= len(self._examples):
      raise ValueError("Dataset has no example at idx %d" % idx)
    input_tensor = self.array_to_sentence(self._examples[idx]["input_tensor"],
                                          "input")
    target_tensor = self.array_to_sentence(self._examples[idx]["target_tensor"],
                                           "target")
    return input_tensor, target_tensor
  
  def get_test_example(self, idx: int):
    if idx >= len(self._test_examples):
      raise ValueError("Test dataset has no example at idx %d" % idx)
    input_tensor = self.array_to_sentence(
        self._test_examples[idx]["input_tensor"], "input")
    target_tensor = self.array_to_sentence(
        self._test_examples[idx]["target_tensor"], "target")
    return input_tensor, target_tensor

  def print_example(self, idx: int, train=True):
    if train:
      input_tensor, target_tensor = self.get_training_example(idx)
    else:
      input_tensor, target_tensor = self.get_test_example(idx)
    print(" ".join(target_tensor))
    print(" ".join(input_tensor))
    
  def sentence_to_array(self, sentence: List[str], 
                        vocabulary: str) -> List[int]:
    """
    Convert each string word in a sentence to the corresponding integer from 
    the vocabulary.
    :param sentence: the sentence in words (strings).
    :param vocabulary: whether to use the input or target vocabulary.
    :return: the sentence in integers.
    """
    vocab = self.get_vocabulary(vocabulary)
    sentence_array = []
    for word in sentence:
      sentence_array.append(vocab.word_to_idx(word))
    return sentence_array

  def array_to_sentence(self, sentence_array: List[int],
                        vocabulary: str) -> List[str]:
    """
    Translate each integer in a sentence array to the corresponding word.
    :param sentence_array: array with integers representing words from the vocabulary.
    :param vocabulary: whether to use the input or target vocabulary.
    :return: the sentence in words.
    """
    vocab = self.get_vocabulary(vocabulary)
    return [vocab.idx_to_word(word_idx) for word_idx in sentence_array.squeeze(dim=0)]

  def get_batch(self, batch_size=2,
                train=True) -> Tuple[torch.Tensor, List[int], torch.Tensor]:
    if train:
      all_examples = self._examples
      all_example_lengths = self._example_lengths
    else:
      all_examples = self._test_examples
      all_example_lengths = self._test_example_lengths
    for example_i in range(0, len(all_examples), batch_size):
      examples = all_examples[example_i:example_i + batch_size]
      example_lengths = all_example_lengths[example_i:example_i + batch_size]
      if len(set(example_lengths)) > 1:
        examples = [x for _, x in sorted(zip(example_lengths, examples),
                                            reverse=True)]
        example_lengths.sort(reverse=True)
      max_length = np.max(example_lengths)
      input_batch = []
      target_batch = []
      for example in examples:
          to_pad = max_length - example["input_tensor"].size(1)
          padded_input = torch.cat([
              example["input_tensor"],
              torch.zeros(int(to_pad), dtype=torch.long, device=device).unsqueeze(0)], dim=1)
          padded_target = torch.cat([
              example["target_tensor"],
              torch.zeros(int(to_pad), dtype=torch.long, device=device).unsqueeze(0)], dim=1)
          input_batch.append(padded_input)
          target_batch.append(padded_target)

      yield (torch.cat(input_batch, dim=0), example_lengths, 
             torch.cat(target_batch, dim=0))
{% endhighlight %}

We'll start by grabbing the UD dataset from the awesome
<a href="https://pytorchnlp.readthedocs.io/en/latest/source/torchnlp.datasets.html" target="_blank">TorchNLP</a> library, which has been made *incredibly* easy:

`ud_dataset = ud_pos_dataset(train=True, test=True)`

Let's take a quick look at this data.

{% highlight python %}
num_training_examples = len(ud_dataset[0])
num_testing_examples = len(ud_dataset[1])
print("We have %d training examples.." % num_training_examples)
print(".. and %d test examples." % num_testing_examples)
{% endhighlight %}

{% highlight terminal %}
We have 12543 training examples..
.. and 2077 test examples.
{% endhighlight %}
# <span style="color:#2874A6">Sources</span>

Natalia Silveira and Timothy Dozat and Marie-Catherine de Marneffe and Samuel Bowman and
    Miriam Connor and John Bauer and Christopher D. Manning (2014).
    <a href="https://www.aclweb.org/anthology/L14-1067/" target="_blank">*A Gold Standard Dependency Corpus for English*</a>